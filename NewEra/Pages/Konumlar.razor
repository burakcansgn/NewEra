@page "/Konumlar"

@using NewEra.Data
@inject IKonumlarService KonumlarService
@inject NavigationManager NavigationManager


<h3>Konumlar</h3>


    <div class="col-lg-12 control-section">
            <div class="content-wrapper">
                <div class="row">
                    <SfSpinner @ref="SpinnerObj" Target="#container"></SfSpinner>
                    <div id="container">
                        <SfGrid ID="Grid" @ref="Grid" DataSource="@konumlar" AllowSelection="false" AllowSorting="true" AllowFiltering="true" Toolbar="Toolbaritems" AllowExcelExport="true" AllowPdfExport="true" Height="600" RowHeight="38">
                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                            <GridPageSettings PageSize="10"></GridPageSettings>
                            <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                            <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                            <GridEvents RowSelected="RowSelectHandler" OnToolbarClick="ToolbarClick" TValue="Data.Konumlar"></GridEvents>
                            <GridColumns>
                                <GridColumn Field=@nameof(Data.Konumlar.Bina) HeaderText="Bina" Visible="true"></GridColumn>
                                <GridColumn Field=@nameof(Data.Konumlar.Kat) HeaderText="Kat" Visible="true"></GridColumn>
                                <GridColumn Field=@nameof(Data.Konumlar.Konum) HeaderText="Konum" Visible="true"></GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                </div>
            </div>
        </div>

    
    <SfDialog IsModal="true" Width="500px" ShowCloseIcon="true" @bind-Visible="@Visibility">
        <h1>@pageTitle</h1>
        <div class="col-lg-12 control-section">
            <EditForm Model="@newkonum" OnValidSubmit="@InsertData">
                <DataAnnotationsValidator />
                <div class="content-wrapper">
                    <div class="row">
                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                            <a>Bina Adı</a>
                            <SfTextBox @bind-Value="@newkonum.Bina" Type="InputType.Text" Placeholder="Bina"></SfTextBox>
                            <ValidationMessage For="() => newkonum.Bina" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                            <a>Kat</a>
                            <SfTextBox @bind-Value="@newkonum.Kat" Type="InputType.Text" Placeholder="Kat"></SfTextBox>
                            <ValidationMessage For="() => newkonum.Kat"></ValidationMessage>
                            <br />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                            <a>Konum</a>
                            <SfTextBox @bind-Value="@newkonum.Konum" Type="InputType.Text" Placeholder="Konum"></SfTextBox>
                            <ValidationMessage For="() => newkonum.Konum" />

                        </div>
                    </div>
                    <br />
                    <div class="col-xs-6 col-sm-6 col-lg-6 col-md-6">
                        <SfProgressButton Content="Ekle" IsPrimary="true" type="submit">
                            <ProgressButtonSpinSettings Position="SpinPosition.Right"></ProgressButtonSpinSettings>
                        </SfProgressButton>
                        <button type="button" class="e-btn e-normal" @onclick="@Cancel">İptal</button>
                    </div>
                </div>

            </EditForm>
            <div class="col-lg-4 control-section">
                <SfToast @ref="ToastObj" ID="toast_type">
                    <ToastPosition X="@ToastPosition"></ToastPosition>
                </SfToast>
            </div>
        </div>
    </SfDialog>

    @code {
        IEnumerable<Data.Konumlar> konumlar;
        SfSpinner SpinnerObj;
        SfGrid<Data.Konumlar> Grid;
        private List<ItemModel> Toolbaritems = new List<ItemModel>();
        private bool Visibility { get; set; } = false;
        public string pageTitle = "Konum Ekle";
        private int KonumlarID;
        [Parameter]
        public int ID { get; set; }


        protected override async Task OnInitializedAsync()
        {
            konumlar = await KonumlarService.KonumlarGetAll();
            Toolbaritems.Add(new ItemModel() { Text = "Ekle", TooltipText = "Yeni Konum Ekle", PrefixIcon = "e-add" });
            Toolbaritems.Add(new ItemModel() { Text = "Düzenle", TooltipText = "Konum Düzenle", PrefixIcon = "e-edit" });
            Toolbaritems.Add(new ItemModel() { Text = "Sil", TooltipText = "Konum Sil", PrefixIcon = "e-delete" });
            Toolbaritems.Add(new ItemModel() { Text = "Excel", TooltipText = "Excel Olarak Kaydet", PrefixIcon = "e-save" });
        }


        public void RowSelectHandler(RowSelectEventArgs<Data.Konumlar> args)
        {
            KonumlarID = args.Data.ID;
        }

        public async Task ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
        {
            if (args.Item.Text == "Excel")
            {
                await this.Grid.ExcelExport();
            }
            if (args.Item.Text == "Ekle")
            {
                Visibility = true;
            }
            if (args.Item.Text == "Düzenle")
            {
                pageTitle = "Konum Ekle";
                //konumlar = await KonumlarService.Konumlar_GetOne(ID);
                Visibility = true;

            }
            if (args.Item.Text == "Sil")
            {
            }
        }


        Data.Konumlar newkonum = new Data.Konumlar();
        SfToast ToastObj;
        private string ToastPosition = "Center";
        private List<ToastModel> Toast = new List<ToastModel>
    {
                new ToastModel{ Title = "Başarılı!", Content="Konum başarı ile oluşturuldu!", CssClass="e-toast-success", Icon="e-success toast-icons" },
                new ToastModel{ Title = "Hata!", Content="Bir hata oluştu!", CssClass="e-toast-danger", Icon="e-error toast-icons" },
        };

        private async void InsertData()
        {
            try
            {
                Visibility = false;
                await KonumlarService.KonumlarInsert(newkonum);
                await this.ToastObj.Show(Toast[0]);
                konumlar = await KonumlarService.KonumlarGetAll();
                StateHasChanged();
            }
            catch (Exception e)
            {
                Visibility = false;
                await this.ToastObj.Show(Toast[1]);
            }
        }

        void Cancel()
        {
            Visibility = false;
        }
    }
